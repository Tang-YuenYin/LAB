1) 
Adjency matric:
_                _
|0 0 1 1 0 0 0 0 0|
|0 0 0 1 0 0 0 0 0|
|0 0 0 0 1 1 0 0 0|
|0 0 0 0 1 0 0 0 0|
|0 0 0 0 0 0 1 0 0|
|0 0 0 0 0 0 0 1 0|
|0 0 0 0 0 0 0 1 0|
|0 0 0 0 0 0 0 0 1|
|0 0 0 0 0 0 0 0 0|
-                 -
Adjency List:
A   C,D
B   D
C   F,E
D   E
E   G
F   H
G   H
H   I
I

When to use matrix? When to use list
=Choose based on graph
=if 0 more than 1, list is better (memory wastage)
=if 1 almost equivalent to 0, both is fine
=1 more than 80% use matrix ( it is easier to use matrix as visualisation is easier)

-List: Memory consumption (Adjency matrix too many 0)

-We choose based on memory consumption and energy consumption 
-0 means nothing but it takes up memory consumption not very good

2)
int[][] matrix={
{0,0,1,1,0,0,0,0,0}
{0,0,0,1,0,0,0,0,0}
{0,0,0,0,1,1,0,0,0}
{0,0,0,0,1,0,0,0,0}
{0,0,0,0,0,0,1,0,0}
{0,0,0,0,0,0,0,1,0}
{0,0,0,0,0,0,0,1,0}
{0,0,0,0,0,0,0,0,1}
{0,0,0,0,0,0,0,0,0}};
Adjacency matrix

3)
//Vertex class
class Vertex<T extends Comparable<T>, N extends Comparable <N>> {
   T vertexInfo;
   int indeg;
   int outdeg;
   Vertex<T,N> nextVertex;
   Edge<T,N> firstEdge;
    
   public Vertex() {
      vertexInfo=null;
      indeg=0;
      outdeg=0;
      nextVertex = null;
      firstEdge = null;
   }
	
   public Vertex(T vInfo, Vertex<T,N> next) {
      vertexInfo = vInfo;
      indeg=0;
      outdeg=0;
      nextVertex = next;
      firstEdge = null;
   }	
}

//Edge Class
class Edge<T extends Comparable<T>, N extends Comparable <N>> {
	Vertex<T,N> toVertex;
	N weight;
	Edge<T,N> nextEdge;
	
	public Edge()	{
		toVertex = null;
		weight = null;
		nextEdge = null;
	}
	
	public Edge(Vertex<T,N> destination, N w, Edge<T,N> a)	{
		toVertex = destination;
		weight = w;
		nextEdge = a;
	}

}

Adjacency list


String[][] vert={"A","B","C","D","E","F","G","H","I"};

for(String str:vert)
myGraph.addVertex(str);
myGraph.addEdge("A","C",1);
myGraph.addEdge("A","D",1);
myGraph.addEdge("B","D",1);
myGraph.addEdge("C","E",1);
myGraph.addEdge("C","F",1);
myGraph.addEdge("D","E",1);
myGraph.addEdge("E","G",1);
myGraph.addEdge("F","H",1);
myGraph.addEdge("G","H",1);
myGraph.addEdge("H","I",1);
