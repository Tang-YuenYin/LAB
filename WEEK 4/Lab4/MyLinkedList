package LinkedList;
public class MyLinkedList<E>{
    Node<E>head;
    Node<E>tail;
    private int size;
    
    public MyLinkedList(){}
    
    public int getSize()
    {
        return size;
    }
    
    public void addFirst(E e)
    {
       Node <E> newNode=new Node<>(e);
       newNode.next=head;
       head=newNode;
       size++;
       
       if(tail==null)
       {
           tail=head;
       }
    }
    
    public void addLast(E e)
    {
      Node<E>  newNode=new Node<E>(e);
      
      if(tail==null)
      {
          head=tail=newNode;
      }
      else
      {
          tail.next=newNode;
          tail=newNode;
      }
      size++;
    }
    
    public void add(int index,E e)
    {
       if(index==0)
           addFirst(e);
       else if(index>=size)
           addLast(e);
       else
       {
           Node<E>current=head;
           for(int i=0;i<index;i++)
           {
               current=current.next;
           }
           Node<E>temp=current.next;
           current.next=new Node<>(e);
           (current.next).next=temp;
           size++;
       }
    }
    
    public E removeFirst()
    {
       if(size==0)
       {
           return null;
       }
       else{
           Node<E> temp=head;
           head=head.next;
           size--;
           if(head==null)
           {
               tail=head;
           }
           return temp.element;
       } 
    }
    
    public E removeLast()
    {
       if(size==0)
       {
           return null;
       }
       else if(size==1){
           Node<E>temp=head;
           head=tail=null;
           size=0;
           return temp.element;
       }
       else{
           Node<E>current=head;
           
           for(int i=0;i<size-2;i++)
           {
               current=current.next;
           }
           Node<E>temp=tail;
           tail=current;
           tail.next=null;
           size--;
           return temp.element;
       }
    }
    
    public E remove(int index)
    {
      if(index<0||index>=size)
      {
          return null;
      }
      else if(index==0)
          return removeFirst();
      else if(index==size-1)
          return removeLast();
      else {
          Node<E>previous=head;
          
          for(int i=1;i<index;i++)
          {
              previous=previous.next;
          }
          
          Node<E>current=previous.next;
          
          previous.next=current.next;
          size--;
          
          return current.element;
      }
    }
    
    public boolean contains(E e)
    {
        boolean found=false;
        Node<E>current=head;
        while(!found&&current!=null)
        {
            if(current.element.equals(e))
                found=true;
            
            current=current.next;
        }
        return found;
    }
    
    public E get(int index)
    {
        Node<E>current=head;
        for(int i=0;i<index;i++)
        {
            current=current.next;
        }
        return current.element;
                
    }
    
    public E getFirst()
    {
       if(size==0)
           return null;
       else 
           return head.element;

    }
    
    public E getLast()
    {
        if(size==0)
           return null;
       else 
           return tail.element;
    }
    
    public int indexOf(E e)
    {
        int result=-1;
        Node<E>current=head;
        if(current!=null)
        {
            for(int i=0;i<size;i++)
            {
                if(current.element.equals(e))
                {
                    result=i;
                    break;
                }
                
                current=current.next;
            }
        }
        return result;
    }
    
    public int lastindexOf(E e)
    {
        int result=-1;
        Node<E>current=head;
        for(int i=0;i<size;i++)
        {
            if(current.element.equals(e))
                result=i;
            
            current=current.next;
        }
        return result;
    }
    
    public E set(int index, E e)
    {
       if(index<0||index>=size) 
           return null;
       
       Node<E> current=head;
       
       if(current==null)
       {
           return null;
       }
       
       for(int i=0;i<index;i++)
       {
           current=current.next;
       }
       
       E temp=current.element;
       current.element=e;
       return temp;
    }
    
    public void clear()
    {
       while(size>0)
       {
           removeLast();
       }
    }
    
    public void print()
    {
      Node<E>current=head;
      while(current!=null)
      {
          System.out.print(current.element+" ");
          
          current=current.next;
      }
        System.out.println();
    }
    
    public void reverse()
    {
        Node<E> current=head;
        Node<E>last=null;
        while(last!=head)
        {
          while(current.next!=last)
          {
              current=current.next;
          }
          
          last=current;
          
            System.out.print(last.element+" ");
            current=head;
            
        }
        System.out.println();
    }
    
    public E getMiddleValue()
    {
        int middle=size/2;
      
      Node<E>current=head;
      
      for(int i=0;i<middle;i++)
      {
          current=current.next;
      }
      
      return current.element;
    }
}

